{
  "_args": [
    [
      "empower@https://registry.npmjs.org/empower/-/empower-1.1.0.tgz",
      "/Users/matsumotokazuma/develop/mtmtkzm/takuten2016"
    ]
  ],
  "_from": "empower@>=1.1.0 <2.0.0",
  "_id": "empower@1.1.0",
  "_inCache": true,
  "_location": "/empower",
  "_phantomChildren": {},
  "_requested": {
    "name": "empower",
    "raw": "empower@https://registry.npmjs.org/empower/-/empower-1.1.0.tgz",
    "rawSpec": "https://registry.npmjs.org/empower/-/empower-1.1.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/empower/-/empower-1.1.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/power-assert"
  ],
  "_resolved": "https://registry.npmjs.org/empower/-/empower-1.1.0.tgz",
  "_shasum": "3967e507bdacccfc660d0f563bb8c97424353b54",
  "_shrinkwrap": null,
  "_spec": "empower@https://registry.npmjs.org/empower/-/empower-1.1.0.tgz",
  "_where": "/Users/matsumotokazuma/develop/mtmtkzm/takuten2016",
  "author": {
    "email": "takuto.wada@gmail.com",
    "name": "Takuto Wada",
    "url": "http://github.com/twada"
  },
  "bugs": {
    "url": "http://github.com/power-assert-js/empower/issues"
  },
  "contributors": [
    {
      "name": "James Talmage",
      "url": "https://github.com/jamestalmage"
    }
  ],
  "dependencies": {
    "array-filter": "^1.0.0",
    "array-foreach": "^1.0.1",
    "array-map": "0.0.0",
    "array-some": "^1.0.0",
    "define-properties": "^1.1.2",
    "escallmatch": "^1.4.1",
    "object-create": "^0.1.0",
    "xtend": "^4.0.0"
  },
  "description": "Power Assert feature enhancer for assert function/object",
  "devDependencies": {
    "acorn": "^2.4.0",
    "acorn-es7-plugin": "^1.0.9",
    "babel-core": "^5.8.33",
    "blanket": "^1.1.7",
    "browserify": "^11.0.1",
    "buster-assertions": "^0.10.4",
    "del": "^2.0.1",
    "escodegen": "^1.7.0",
    "espower": "^1.2.1",
    "gulp": "^3.9.0",
    "gulp-derequire": "^2.1.0",
    "gulp-dereserve": "^0.2.1",
    "gulp-mocha": "^2.1.3",
    "gulp-mocha-phantomjs": "^0.10.1",
    "gulp-util": "^3.0.6",
    "gulp-webserver": "^0.9.1",
    "licensify": "^2.0.0",
    "mocha": "^2.3.2",
    "mocha-lcov-reporter": "^0.0.2",
    "through2": "^2.0.0",
    "vinyl-source-stream": "^1.1.0"
  },
  "directories": {
    "lib": "./lib"
  },
  "files": [
    "CHANGELOG.md",
    "MIT-LICENSE.txt",
    "README.md",
    "gulpfile.js",
    "index.js",
    "lib",
    "build/empower.js",
    "package.json",
    "test"
  ],
  "homepage": "http://github.com/power-assert-js/empower",
  "keywords": [
    "power-assert",
    "assert",
    "assertion",
    "test",
    "testing"
  ],
  "license": "MIT",
  "main": "./index.js",
  "name": "empower",
  "optionalDependencies": {},
  "readme": "empower\n================================\n\n[![Build Status][travis-image]][travis-url]\n[![NPM package][npm-image]][npm-url]\n[![Bower package][bower-image]][bower-url]\n[![Dependency Status][depstat-image]][depstat-url]\n[![Coverage Status][coverage-image]][coverage-url]\n[![Code Climate][codeclimate-image]][codeclimate-url]\n[![License][license-image]][license-url]\n[![Built with Gulp][gulp-image]][gulp-url]\n\n\nPower Assert feature enhancer for assert function/object.\n\n\nDESCRIPTION\n---------------------------------------\n`empower` is a core module of [power-assert](http://github.com/power-assert-js/power-assert) family. `empower` enhances standard `assert` function or any assert-like object to work with power-assert feature added code instrumented by [espower](http://github.com/power-assert-js/espower).\n\n\n`empower` works with standard `assert` function (best fit with [Mocha](http://visionmedia.github.io/mocha/)), and also supports assert-like objects/functions provided by various testing frameworks such as [QUnit](http://qunitjs.com/), [buster.js](http://docs.busterjs.org/en/latest/), and [nodeunit](https://github.com/caolan/nodeunit).\n\n\nPull-requests, issue reports and patches are always welcomed. See [power-assert](http://github.com/power-assert-js/power-assert) project for more documentation.\n\n\nCHANGELOG\n---------------------------------------\nSee [CHANGELOG](https://github.com/power-assert-js/empower/blob/master/CHANGELOG.md)\n\n\nAPI\n---------------------------------------\n\n### var enhancedAssert = empower(originalAssert, formatter, [options])\n\n| return type            |\n|:-----------------------|\n| `function` or `object` |\n\n`empower` function takes function or object(`originalAssert`) and `formatter` function created by [power-assert-formatter](http://github.com/power-assert-js/power-assert-formatter) then returns PowerAssert feature added function/object base on `originalAssert`.\nIf `destructive` option is falsy, `originalAssert` will be unchanged. If `destructive` option is truthy, `originalAssert` will be manipulated directly and returned `enhancedAssert` will be the same instance of `originalAssert`.\n\n\n#### originalAssert\n\n| type                   | default value |\n|:-----------------------|:--------------|\n| `function` or `object` | N/A           |\n\n`originalAssert` is an instance of standard `assert` function or any assert-like object. see [SUPPORTED ASSERTION LIBRARIES](https://github.com/power-assert-js/empower#supported-assertion-libraries) and [ASSERTION LIBRARIES KNOWN TO WORK](https://github.com/power-assert-js/empower#assertion-libraries-known-to-work) section. Be careful that `originalAssert` will be manipulated directly if `destructive` option is truthy.\n\n\n#### formatter\n\n| type       | default value |\n|:-----------|:--------------|\n| `function` | N/A           |\n\nformatter function created by [power-assert-formatter](http://github.com/power-assert-js/power-assert-formatter).\n\n\n#### options\n\n| type     | default value |\n|:---------|:--------------|\n| `object` | (return value of `empower.defaultOptions()`) |\n\nConfiguration options. If not passed, default options will be used.\n\n\n#### options.destructive\n\n| type      | default value |\n|:----------|:--------------|\n| `boolean` | `false`       |\n\nIf truthy, modify `originalAssert` destructively.\n\nIf `false`, empower mimics originalAssert as new object/function, so `originalAssert` will not be changed. If `true`, `originalAssert` will be manipulated directly and returned `enhancedAssert` will be the same instance of `originalAssert`.\n\n\n#### options.modifyMessageOnRethrow\n\n| type      | default value |\n|:----------|:--------------|\n| `boolean` | `false`       |\n\nIf truthy, modify `message` property of AssertionError on rethrow.\n\n\n#### options.saveContextOnRethrow\n\n| type      | default value |\n|:----------|:--------------|\n| `boolean` | `false`       |\n\nIf truthy, add `powerAssertContext` property to AssertionError on rethrow.\n\n\n`modifyMessageOnRethrow` option and `saveContextOnRethrow` option makes behavior matrix as below.\n\n| modifyMessageOnRethrow | saveContextOnRethrow | resulting behavior                                |\n|:-----------------------|:---------------------|:--------------------------------------------------|\n| `false` (default)      | `false` (default)    | Always modify assertion message argument directly |\n| `true`                 | `false`              | Modify `message` of AssertionError on fail        |\n| `false`                | `true`               | Do not modify `message` of AssertionError but add `powerAssertContext` property on fail |\n| `true`                 | `true`               | On fail, modify `message` of AssertionError and also add `powerAssertContext` property |\n\n\n#### options.patterns\n\n| type                | default value       |\n|:--------------------|:--------------------|\n| `Array` of `string` | objects shown below |\n\n```javascript\n[\n    'assert(value, [message])',\n    'assert.ok(value, [message])',\n    'assert.equal(actual, expected, [message])',\n    'assert.notEqual(actual, expected, [message])',\n    'assert.strictEqual(actual, expected, [message])',\n    'assert.notStrictEqual(actual, expected, [message])',\n    'assert.deepEqual(actual, expected, [message])',\n    'assert.notDeepEqual(actual, expected, [message])',\n    'assert.deepStrictEqual(actual, expected, [message])',\n    'assert.notDeepStrictEqual(actual, expected, [message])'\n]\n```\n\nTarget patterns for power assert feature instrumentation.\n\nPattern detection is done by [escallmatch](http://github.com/twada/escallmatch). Any arguments enclosed in bracket (for example, `[message]`) means optional parameters. Without bracket means mandatory parameters.\n\n\n### var options = empower.defaultOptions();\n\nReturns default options object for `empower` function. In other words, returns\n\n```javascript\n{\n    destructive: false,\n    modifyMessageOnRethrow: false,\n    saveContextOnRethrow: false,\n    patterns: [\n        'assert(value, [message])',\n        'assert.ok(value, [message])',\n        'assert.equal(actual, expected, [message])',\n        'assert.notEqual(actual, expected, [message])',\n        'assert.strictEqual(actual, expected, [message])',\n        'assert.notStrictEqual(actual, expected, [message])',\n        'assert.deepEqual(actual, expected, [message])',\n        'assert.notDeepEqual(actual, expected, [message])',\n        'assert.deepStrictEqual(actual, expected, [message])',\n        'assert.notDeepStrictEqual(actual, expected, [message])'\n    ]\n}\n```\n\n\nSUPPORTED ASSERTION LIBRARIES\n---------------------------------------\n* [Node assert API](http://nodejs.org/api/assert.html)\n* [Jxck/assert](https://github.com/Jxck/assert)\n\n\nASSERTION LIBRARIES KNOWN TO WORK\n---------------------------------------\n* [QUnit.assert](http://qunitjs.com/)\n* [nodeunit](https://github.com/caolan/nodeunit)\n* [buster-assertions](http://docs.busterjs.org/en/latest/modules/buster-assertions/)\n\n\nINSTALL\n---------------------------------------\n\n### via npm\n\nInstall\n\n    $ npm install --save-dev empower\n\n\n#### use empower npm module on browser\n\n`empower` function is exported\n\n    <script type=\"text/javascript\" src=\"./path/to/node_modules/empower/build/empower.js\"></script>\n\n\n### via bower\n\nInstall\n\n    $ bower install --save-dev empower\n\nThen load (`empower` function is exported)\n\n    <script type=\"text/javascript\" src=\"./path/to/bower_components/empower/build/empower.js\"></script>\n\n\nAUTHOR\n---------------------------------------\n* [Takuto Wada](http://github.com/twada)\n\n\nCONTRIBUTORS\n---------------------------------------\n* [James Talmage (jamestalmage)](https://github.com/jamestalmage)\n\n\nLICENSE\n---------------------------------------\nLicensed under the [MIT](https://github.com/power-assert-js/empower/blob/master/MIT-LICENSE.txt) license.\n\n\n[npm-url]: https://npmjs.org/package/empower\n[npm-image]: https://badge.fury.io/js/empower.svg\n\n[bower-url]: http://badge.fury.io/bo/empower\n[bower-image]: https://badge.fury.io/bo/empower.svg\n\n[travis-url]: http://travis-ci.org/power-assert-js/empower\n[travis-image]: https://secure.travis-ci.org/power-assert-js/empower.svg?branch=master\n\n[depstat-url]: https://gemnasium.com/power-assert-js/empower\n[depstat-image]: https://gemnasium.com/power-assert-js/empower.svg\n\n[license-url]: https://github.com/power-assert-js/empower/blob/master/MIT-LICENSE.txt\n[license-image]: http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat\n\n[codeclimate-url]: https://codeclimate.com/github/power-assert-js/empower\n[codeclimate-image]: https://codeclimate.com/github/power-assert-js/empower/badges/gpa.svg\n\n[coverage-url]: https://coveralls.io/r/power-assert-js/empower?branch=master\n[coverage-image]: https://coveralls.io/repos/power-assert-js/empower/badge.svg?branch=master\n\n[gulp-url]: http://gulpjs.com/\n[gulp-image]: http://img.shields.io/badge/built_with-gulp-brightgreen.svg\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/power-assert-js/empower.git"
  },
  "scripts": {
    "bower": "bower install --config.interactive=false",
    "build": "npm prune && npm dedupe && gulp bundle",
    "coveralls": "gulp coverage && cat ./coverage.lcov | coveralls",
    "test": "gulp test",
    "unit": "gulp unit",
    "watch": "gulp watch"
  },
  "version": "1.1.0"
}
