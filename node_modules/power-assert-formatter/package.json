{
  "_args": [
    [
      "power-assert-formatter@https://registry.npmjs.org/power-assert-formatter/-/power-assert-formatter-1.3.2.tgz",
      "/Users/matsumotokazuma/develop/mtmtkzm/takuten2016"
    ]
  ],
  "_from": "power-assert-formatter@>=1.3.1 <2.0.0",
  "_id": "power-assert-formatter@1.3.2",
  "_inCache": true,
  "_location": "/power-assert-formatter",
  "_phantomChildren": {},
  "_requested": {
    "name": "power-assert-formatter",
    "raw": "power-assert-formatter@https://registry.npmjs.org/power-assert-formatter/-/power-assert-formatter-1.3.2.tgz",
    "rawSpec": "https://registry.npmjs.org/power-assert-formatter/-/power-assert-formatter-1.3.2.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/power-assert-formatter/-/power-assert-formatter-1.3.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/power-assert"
  ],
  "_resolved": "https://registry.npmjs.org/power-assert-formatter/-/power-assert-formatter-1.3.2.tgz",
  "_shasum": "20688d5fdfefd956682d56723a2d72903df11714",
  "_shrinkwrap": null,
  "_spec": "power-assert-formatter@https://registry.npmjs.org/power-assert-formatter/-/power-assert-formatter-1.3.2.tgz",
  "_where": "/Users/matsumotokazuma/develop/mtmtkzm/takuten2016",
  "author": {
    "email": "takuto.wada@gmail.com",
    "name": "Takuto Wada",
    "url": "http://github.com/twada"
  },
  "bugs": {
    "url": "http://github.com/power-assert-js/power-assert-formatter/issues"
  },
  "contributors": [
    {
      "name": "James Talmage",
      "url": "https://github.com/jamestalmage"
    }
  ],
  "dependencies": {
    "acorn": "^2.5.2",
    "acorn-es7-plugin": "^1.0.10",
    "array-foreach": "^1.0.1",
    "array-map": "0.0.0",
    "array-reduce": "0.0.0",
    "eastasianwidth": "^0.1.0",
    "estraverse": "^4.1.0",
    "googlediff": "^0.1.0",
    "object-keys": "^1.0.4",
    "stringifier": "^1.2.0",
    "type-name": "^1.0.1",
    "xtend": "^4.0.0"
  },
  "description": "Power Assert output formatter",
  "devDependencies": {
    "babel-core": "^5.8.22",
    "babel-plugin-espower": "^1.1.0",
    "blanket": "^1.1.7",
    "browserify": "^11.0.1",
    "del": "^1.2.1",
    "empower": "^1.1.0",
    "escodegen": "^1.6.1",
    "espower": "^1.2.1",
    "esprima": "^2.5.0",
    "gulp": "^3.9.0",
    "gulp-derequire": "^2.1.0",
    "gulp-dereserve": "^0.2.1",
    "gulp-jshint": "^1.11.2",
    "gulp-mocha": "^2.1.3",
    "gulp-mocha-phantomjs": "^0.9.0",
    "gulp-util": "^3.0.6",
    "gulp-webserver": "^0.9.1",
    "jshint-stylish": "^2.0.1",
    "licensify": "^2.0.1",
    "mocha": "^2.2.5",
    "mocha-lcov-reporter": "^0.0.2",
    "through2": "^2.0.0",
    "vinyl-source-stream": "^1.1.0"
  },
  "directories": {
    "lib": "./lib"
  },
  "files": [
    "CHANGELOG.md",
    "MIT-LICENSE.txt",
    "README.md",
    "gulpfile.js",
    "index.js",
    "lib",
    "build/power-assert-formatter.js",
    "package.json",
    "test"
  ],
  "homepage": "http://github.com/power-assert-js/power-assert-formatter",
  "keywords": [
    "power-assert",
    "test",
    "testing",
    "assert",
    "assertion"
  ],
  "license": "MIT",
  "main": "./index.js",
  "name": "power-assert-formatter",
  "optionalDependencies": {},
  "readme": "power-assert-formatter\n================================\n\n[![Build Status][travis-image]][travis-url]\n[![NPM package][npm-image]][npm-url]\n[![Bower package][bower-image]][bower-url]\n[![Dependency Status][depstat-image]][depstat-url]\n[![Coverage Status][coverage-image]][coverage-url]\n[![Code Climate][codeclimate-image]][codeclimate-url]\n[![License][license-image]][license-url]\n[![Built with Gulp][gulp-image]][gulp-url]\n\nPower Assert output formatter.\n\n\nDESCRIPTION\n---------------------------------------\n`power-assert-formatter` is a formatter module for Power Assert output.\n\nPull-requests, issue reports and patches are always welcomed. See [power-assert](http://github.com/power-assert-js/power-assert) project for more documentation.\n\n\nCHANGELOG\n---------------------------------------\nSee [CHANGELOG](https://github.com/power-assert-js/power-assert-formatter/blob/master/CHANGELOG.md)\n\n\nAPI\n---------------------------------------\n\n### var createFormatter = require('power-assert-formatter');\n\n| return type |\n|:------------|\n| `function`  |\n\nReturns creator function for power-assert.\n\n### var formatter = createFormatter([options]);\n\n| return type |\n|:------------|\n| `function`  |\n\nCreate formatter function with options. `options` argument is optional.\n\n#### options\n\n| type     | default value |\n|:---------|:--------------|\n| `object` | (return value of `createFormatter.defaultOptions()`) |\n\nConfiguration options. If not passed, default options will be used.\n\n#### options.lineDiffThreshold\n\n| type     | default value |\n|:---------|:--------------|\n| `number` | `5`           |\n\nThreshold to show diff at character level or line level. If number of lines in target string is greater than `lineDiffThreshold`, then line diff mode will be used to show diff output.\n\n#### options.maxDepth\n\n| type     | default value |\n|:---------|:--------------|\n| `number` | `1`           |\n\nDepth of object traversal. If object depth is greater than `maxDepth`, compound object (IOW, `Array` or `object`) will be pruned with `#` like `[\"foo\",#Array#,#Object#]`.\n\n#### options.outputOffset\n\n| type     | default value |\n|:---------|:--------------|\n| `number` | `2`           |\n\nNumber of spaces inserted at the left in power-assert output.\n\n#### options.anonymous\n\n| type     | default value |\n|:---------|:--------------|\n| `string` | `\"Object\"`    |\n\nType name to show when target object is created by anonymous constructor.\n\n#### options.circular\n\n| type     | default value   |\n|:---------|:----------------|\n| `string` | `\"#@Circular#\"` |\n\nName to show when target object is detected as circular structure.\n\n#### options.lineSeparator\n\n| type     | default value |\n|:---------|:--------------|\n| `string` | `\"\\n\"`        |\n\nLine separator in power assert output.\n\n#### options.ambiguousEastAsianCharWidth\n\n| type     | default value |\n|:---------|:--------------|\n| `number` | `2`           |\n\nWidth of 'Ambiguous' characters defined in [Unicode Standard Annex \\#11 EAST ASIAN WIDTH](http://www.unicode.org/reports/tr11/#Ambiguous). Configure `options.ambiguousEastAsianCharWidth` to treat ambiguous east asian character as fullwidth (= `2`) or narrow (= `1`). Default is `2`.\n\n#### options.widthOf\n\n| type       | default value |\n|:-----------|:--------------|\n| `function` | [string-width.js](https://github.com/power-assert-js/power-assert-formatter/blob/master/lib/string-width.js) |\n\nFunction to calculate width of string.\n\n#### options.stringify\n\n| type       | default value |\n|:-----------|:--------------|\n| `function` | [stringifier module](https://github.com/twada/stringifier) |\n\nFunction to stringify any target value.\n\n#### options.diff\n\n| type       | default value |\n|:-----------|:--------------|\n| `function` | [udiff.js](https://github.com/power-assert-js/power-assert-formatter/blob/master/lib/udiff.js) |\n\nFunction to create diff string between two strings.\n\n#### options.writerClass\n\n| type       | default value |\n|:-----------|:--------------|\n| `function` | [string-writer.js](https://github.com/power-assert-js/power-assert-formatter/blob/master/lib/string-writer.js) |\n\nConstructor Function for output writer class.\n\n#### options.renderers\n\n| type                                | default value |\n|:------------------------------------|:--------------|\n| `Array` of (`string` or `function` )| shown below   |\n\n```javascript\n[\n    './built-in/file',\n    './built-in/assertion',\n    './built-in/diagram',\n    './built-in/binary-expression'\n]\n```\n\nOutput renderers. Power assert output is rendered by renderers in order. You can create custom renderer and add its constructor function to customize power-assert-output.\n\n```javascript\n[\n    './built-in/file',\n    './built-in/assertion',\n    YourCustomRenderer,\n    './built-in/binary-expression'\n]\n```\n\n\n### var options = createFormatter.defaultOptions();\n\nReturns default options object for createFormatter function. In other words, returns\n\n```javascript\n{\n    lineDiffThreshold: 5,\n    maxDepth: 1,\n    anonymous: 'Object',\n    circular: '#@Circular#',\n    lineSeparator: '\\n',\n    ambiguousEastAsianCharWidth: 2,\n    renderers: [\n        './built-in/file',\n        './built-in/assertion',\n        './built-in/diagram',\n        './built-in/binary-expression'\n    ]\n};\n```\n\n\n### var formattedText = formatter(powerAssertContext);\n\n| return type |\n|:------------|\n| `string`  |\n\nFormat `powerAssertContext` into `formattedText`. `powerAssertContext` is an internal object structure, containing informations to render. Example of `powerAssertContext` is:\n\n```javascript\n{\n    source: {\n        content: \"assert.equal(foo, bar)\",\n        filepath: \"/path/to/some_test.js\",\n        line: 1\n    },\n    args: [\n        {\n            value: \"foo\",\n            events: [\n                {\n                    value: \"foo\",\n                    espath: \"arguments/0\"\n                }\n            ]\n        },\n        {\n            value: \"bar\",\n            events: [\n                {\n                    value: \"bar\",\n                    espath: \"arguments/1\"\n                }\n            ]\n        }\n    ]\n}\n```\n\nNote that structure of powerAssertContext may change.\n\n\nINSTALL\n---------------------------------------\n\n### via npm\n\nInstall\n\n    $ npm install --save-dev power-assert-formatter\n\n\n#### use power-assert-formatter npm module on browser\n\n`powerAssertFormatter` function is exported\n\n    <script type=\"text/javascript\" src=\"./path/to/node_modules/power-assert-formatter/build/power-assert-formatter.js\"></script>\n\n\n### via bower\n\nInstall\n\n    $ bower install --save-dev power-assert-formatter\n\nThen load (`powerAssertFormatter` function is exported)\n\n    <script type=\"text/javascript\" src=\"./path/to/bower_components/power-assert-formatter/build/power-assert-formatter.js\"></script>\n\n\nAUTHOR\n---------------------------------------\n* [Takuto Wada](http://github.com/twada)\n\n\nCONTRIBUTORS\n---------------------------------------\n* [James Talmage (jamestalmage)](https://github.com/jamestalmage)\n\n\nLICENSE\n---------------------------------------\nLicensed under the [MIT](https://github.com/power-assert-js/power-assert-formatter/blob/master/MIT-LICENSE.txt) license.\n\n\n[npm-url]: https://npmjs.org/package/power-assert-formatter\n[npm-image]: https://badge.fury.io/js/power-assert-formatter.svg\n\n[bower-url]: http://badge.fury.io/bo/power-assert-formatter\n[bower-image]: https://badge.fury.io/bo/power-assert-formatter.svg\n\n[travis-url]: http://travis-ci.org/power-assert-js/power-assert-formatter\n[travis-image]: https://secure.travis-ci.org/power-assert-js/power-assert-formatter.svg?branch=master\n\n[depstat-url]: https://gemnasium.com/power-assert-js/power-assert-formatter\n[depstat-image]: https://gemnasium.com/power-assert-js/power-assert-formatter.svg\n\n[license-url]: https://github.com/power-assert-js/power-assert-formatter/blob/master/MIT-LICENSE.txt\n[license-image]: http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat\n\n[codeclimate-url]: https://codeclimate.com/github/power-assert-js/power-assert-formatter\n[codeclimate-image]: https://codeclimate.com/github/power-assert-js/power-assert-formatter/badges/gpa.svg\n\n[coverage-url]: https://coveralls.io/r/power-assert-js/power-assert-formatter?branch=master\n[coverage-image]: https://coveralls.io/repos/power-assert-js/power-assert-formatter/badge.svg?branch=master\n\n[gulp-url]: http://gulpjs.com/\n[gulp-image]: http://img.shields.io/badge/built_with-gulp-brightgreen.svg\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/power-assert-js/power-assert-formatter.git"
  },
  "scripts": {
    "bower": "bower install --config.interactive=false",
    "build": "npm run clean && npm prune && npm dedupe && gulp bundle",
    "clean": "gulp clean",
    "coveralls": "gulp coverage && cat ./coverage.lcov | coveralls",
    "dist": "npm run build && gulp dist",
    "lint": "gulp lint",
    "preversion": "npm test",
    "test": "npm run lint && gulp test",
    "unit": "gulp unit",
    "version": "npm run dist && git add -A build",
    "watch": "gulp watch"
  },
  "version": "1.3.2"
}
