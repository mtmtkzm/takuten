{
  "_args": [
    [
      "stringifier@https://registry.npmjs.org/stringifier/-/stringifier-1.2.1.tgz",
      "/Users/matsumotokazuma/develop/mtmtkzm/takuten2016"
    ]
  ],
  "_from": "stringifier@>=1.2.0 <2.0.0",
  "_id": "stringifier@1.2.1",
  "_inCache": true,
  "_location": "/stringifier",
  "_phantomChildren": {},
  "_requested": {
    "name": "stringifier",
    "raw": "stringifier@https://registry.npmjs.org/stringifier/-/stringifier-1.2.1.tgz",
    "rawSpec": "https://registry.npmjs.org/stringifier/-/stringifier-1.2.1.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/stringifier/-/stringifier-1.2.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/power-assert-formatter"
  ],
  "_resolved": "https://registry.npmjs.org/stringifier/-/stringifier-1.2.1.tgz",
  "_shasum": "033931dc86dc5e153166d08b6ebb26247e0e27cb",
  "_shrinkwrap": null,
  "_spec": "stringifier@https://registry.npmjs.org/stringifier/-/stringifier-1.2.1.tgz",
  "_where": "/Users/matsumotokazuma/develop/mtmtkzm/takuten2016",
  "author": {
    "email": "takuto.wada@gmail.com",
    "name": "Takuto Wada",
    "url": "https://github.com/twada"
  },
  "bugs": {
    "url": "https://github.com/twada/stringifier/issues"
  },
  "dependencies": {
    "array-filter": "^1.0.0",
    "array-foreach": "^1.0.1",
    "array-reduce-right": "^1.0.0",
    "indexof": "^0.0.1",
    "traverse": "^0.6.6",
    "type-name": "^1.1.0",
    "xtend": "^4.0.0"
  },
  "description": "Yet another stringify function",
  "devDependencies": {
    "browserify": "^11.2.0",
    "del": "^2.0.2",
    "gulp": "^3.9.0",
    "gulp-derequire": "^2.1.0",
    "gulp-dereserve": "^0.2.1",
    "gulp-mocha": "^2.1.3",
    "gulp-mocha-phantomjs": "^0.10.1",
    "gulp-util": "^3.0.6",
    "gulp-webserver": "^0.9.1",
    "licensify": "^2.0.1",
    "mocha": "^2.3.3",
    "vinyl-source-stream": "^1.1.0"
  },
  "files": [
    "CHANGELOG.md",
    "README.md",
    "index.js",
    "strategies.js",
    "build/stringifier.js",
    "package.json",
    "test"
  ],
  "homepage": "https://github.com/twada/stringifier",
  "keywords": [
    "stringify"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "stringifier",
  "optionalDependencies": {},
  "readme": "stringifier\n================================\n\nYet another stringify function.\n\n[![Build Status][travis-image]][travis-url]\n[![NPM package][npm-image]][npm-url]\n[![Bower package][bower-image]][bower-url]\n[![Dependency Status][depstat-image]][depstat-url]\n[![License][license-image]][license-url]\n\n\nDESCRIPTION\n---------------------------------------\n\n`stringifier` is a function like `JSON.stringify` but intended to be more customizable. For example,\n\n- Max depth for recursive object tree traversal\n- Per-type output customization\n- Circular reference handling\n\n\nPull-requests, issue reports and patches are always welcomed. `stringifier` is a spin-off product of [power-assert](http://github.com/twada/power-assert) project.\n\n\nAPI\n---------------------------------------\n\n\n### stringifier(options)\n\n`require('stringifier')` exports single function `stringifier` that accepts `options` as optional parameters and returns configured function for stringify. This is the comprehensive usage.\n\n```javascript\nvar stringifier = require('stringifier');\nvar stringify = stringifier(options);\nconsole.log(stringify(anyVar));\n```\n\n\n### stringifier.stringify(val, options)\n\nFor more simplified usage, `stringifier` has a function `stringify`, that simply takes target object/value and returns stringified result string. `stringifier.stringify` accepts `options` as optional parameter too.\n\n```javascript\nvar stringify = require('stringifier').stringify;\nconsole.log(stringify(anyVar));\n```\n\n\nINSTALL\n---------------------------------------\n\n### via npm\n\nInstall\n\n    $ npm install --save stringifier\n\nUse\n\n```javascript\nvar stringify = require('stringifier').stringify;\nconsole.log(stringify(anyVar));\n```\n\n#### use stringifier npm module on browser\n\n`stringifier` function is exported\n\n    <script type=\"text/javascript\" src=\"./path/to/node_modules/stringifier/build/stringifier.js\"></script>\n\n\n### via bower\n\nInstall\n\n    $ bower install --save stringifier\n\nLoad (`stringifier` function is exported)\n\n    <script type=\"text/javascript\" src=\"./path/to/bower_components/stringifier/build/stringifier.js\"></script>\n\nUse\n\n```javascript\nconsole.log(stringifier.stringify(anyVar));\n```\n\n\nEXAMPLE\n---------------------------------------\n\nFor given context,\n\n```javascript\nvar stringifier = require('stringifier'),\n    assert = require('assert');\n\nfunction Student (name, age, gender) {\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n}\n\nvar AnonStudent = function(name, age, gender) {\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n};\n\nvar student = new Student('tom', 10, 'M');\nvar anonStudent = new AnonStudent('mary', 9, 'F');\n\nvar values = [\n    'string', \n    [null, undefined],\n    {\n        primitives: [true, false, -5, 98.6],\n        specific: {\n            regex: /^not/,\n            numbers: [NaN, Infinity, -Infinity]\n        },\n        userDefined: [\n            student,\n            anonStudent\n        ]\n    }\n];\n```\n\n\n#### default single-line output\n\n```javascript\nvar stringify = stringifier();\nconsole.log(stringify(values));\n```\nresult:\n\n```javascript\n[\"string\",[null,undefined],Object{primitives:[true,false,-5,98.6],specific:Object{regex:/^not/,numbers:[NaN,Infinity,-Infinity]},userDefined:[Student{name:\"tom\",age:10,gender:\"M\"},@Anonymous{name:\"mary\",age:9,gender:\"F\"}]}]\n```\n\n\n#### pretty printing with indentation\n\nUse `indent` option for pretty printing. Using four spaces for indentation in this case.\n\n```javascript\nvar stringify = stringifier({indent: '    '});\nconsole.log(stringify(values));\n```\n\nresult:\n\n```javascript\n[\n    \"string\",\n    [\n        null,\n        undefined\n    ],\n    Object{\n        primitives: [\n            true,\n            false,\n            -5,\n            98.6\n        ],\n        specific: Object{\n            regex: /^not/,\n            numbers: [\n                NaN,\n                Infinity,\n                -Infinity\n            ]\n        },\n        userDefined: [\n            Student{\n                name: \"tom\",\n                age: 10,\n                gender: \"M\"\n            },\n            @Anonymous{\n                name: \"mary\",\n                age: 9,\n                gender: \"F\"\n            }\n        ]\n    }\n]\n```\n\n\n#### depth limitation\n\nUse `maxDepth` option to stringify at most specified levels.\n\n```javascript\nvar stringify = stringifier({maxDepth: 3, indent: '    '});\nconsole.log(stringify(values));\n```\n\nresult:\n\n```javascript\n[\n    \"string\",\n    [\n        null,\n        undefined\n    ],\n    Object{\n        primitives: [\n            true,\n            false,\n            -5,\n            98.6\n        ],\n        specific: Object{\n            regex: /^not/,\n            numbers: #Array#\n        },\n        userDefined: [\n            #Student#,\n            #@Anonymous#\n        ]\n    }\n]\n```\n\n\n#### anonymous class label\n\nUse `anonymous` option to specify alternate type name for anonymous constructors.\n\n```javascript\nvar stringify = stringifier({anonymous: 'ANON'});\nassert(stringify(anonStudent) === 'ANON{name:\"mary\",age:9,gender:\"F\"}');\n```\n\n\n#### omit specific property from output\n\nCustomize `options.handlers`\n\n```javascript\nvar stringify;\n\n// property whitelist and reordering\nstringify = stringifier({\n    handlers: {\n        'Student': s.object(null, ['gender', 'age'])\n    }\n});\nassert(stringify(student) === 'Student{gender:\"M\",age:10}');\n\n// blacklist by property name\nstringify = stringifier({\n    handlers: {\n        'Student': s.object(function (kvp) {\n            return ['age', 'gender'].indexOf(kvp.key) === -1;\n        })\n    }\n});\nassert(stringify(student) === 'Student{name:\"tom\"}');\n\n// blacklist by property value\nstringify = stringifier({\n    handlers: {\n        'Student': s.object(function (kvp) {\n            return kvp.value !== 'M';\n        })\n    }\n});\nassert(stringify(student) === 'Student{name:\"tom\",age:10}');\n\n// whitelist by property value\nstringify = stringifier({\n    handlers: {\n        'Student': s.object(function (kvp) {\n            return typeName(kvp.value) === 'string';\n        })\n    }\n});\nassert(stringify(student) === 'Student{name:\"tom\",gender:\"M\"}');\n```\n\n\n#### truncate property value\n\nReturn number from object predicate\n\n```javascript\nstringify = stringifier({\n    handlers: {\n        'Student': s.object(function (kvp) {\n            if (kvp.key === 'name') {\n                return 3;\n            }\n            return true;\n        })\n    }\n});\nassert(stringify(student) === 'Student{name:\"to..(snip),age:10,gender:\"M\"}');\n```\n\n\n\nCONFIGURATION\n---------------------------------------\n\n### options\n\n\n#### options.maxDepth\nType: `number`\nDefault value: `null`\n\nMax depth for recursive Object tree traversal\n\n\n#### options.indent\nType: `String`\nDefault value: `null`\n\nstring value for indentation.\nIf this value is not empty, stringified result may contain multiple lines.\n\n\n#### options.lineSeparator\nType: `String`\nDefault value: `'\\n'`\n\nstring value for line-separator.\nMakes sense only if `options.indent` is not empty.\n\n\n#### options.anonymous\nType: `String`\nDefault value: `'@Anonymous'`\n\nType name string alternative for displaying Object created by anonymous constructor\n\n\n#### options.circular\nType: `String`\nDefault value: `'#@Circular#'`\n\nAlternative string for displaying Circular reference\n\n\n#### options.snip\nType: `String`\nDefault value: `'..(snip)'`\n\nFor displaying truncated string\n\n\n#### options.handlers\n\n`options.handlers` is a object where property names are type names (string, number, ...) and values are per-type stringify strategy functions. Various strategies are defined in `stringifier.strategies`, and default strategies are defined as follows.\n\n```javascript\nvar s = require('./strategies');\nfunction defaultHandlers () {\n    return {\n        'null': s.always('null'),\n        'undefined': s.always('undefined'),\n        'function': s.prune(),\n        'string': s.json(),\n        'boolean': s.json(),\n        'number': s.number(),\n        'symbol': s.toStr(),\n        'RegExp': s.toStr(),\n        'String': s.newLike(),\n        'Boolean': s.newLike(),\n        'Number': s.newLike(),\n        'Date': s.newLike(),\n        'Array': s.array(),\n        'Object': s.object(),\n        '@default': s.object()\n    };\n}\n```\n\nIf unknown type is detected, strategy function registered by `'@default'` key will be used.\n\n\n### strategies\n\nFor given `Student` pseudo-class and a `stringifier`,\n\n```javascript\nvar stringifier = require('stringifier'),\n    s = stringifier.strategies,\n    assert = require('assert'),\n\nfunction Student (name, age, gender) {\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n}\n\nvar student = new Student('tom', 10, 'M');\n```\n\n#### always\n\n`always` strategy always returns passed constant (In this case, `'foo'`).\n\n```javascript\nvar stringify = stringifier({\n    handlers: {\n        'Student': s.always('foo')\n    }\n});\nassert(stringify(student) === 'foo');\n```\n\n#### json\n\n`json` strategy applies `JSON.stringify` to input value then return the result string.\n\n```javascript\nvar stringify = stringifier({\n    handlers: {\n        'Student': s.json()\n    }\n});\nassert(stringify(student) === '{\"name\":\"tom\",\"age\":10,\"gender\":\"M\"}');\n```\n\n#### toStr\n\n`toStr` strategy calls `toString()` to input value then return the result string.\n\n```javascript\nvar stringify = stringifier({\n    handlers: {\n        'Student': s.toStr()\n    }\n});\nassert(stringify(student) === '[object Object]');\n```\n\n#### prune\n\n`prune` strategy does not serialize target value but returns target type name surrounded by `#`.\n\n```javascript\nvar stringify = stringifier({\n    handlers: {\n        'Student': s.prune()\n    }\n});\nassert(stringify(student) === '#Student#');\n```\n\n#### newLike\n\n`newLike` strategy emulates \"new constructor call pattern\".\n\n```javascript\nvar stringify = stringifier({\n    handlers: {\n        'Student': s.newLike()\n    }\n});\nassert(stringify(student) === 'new Student({\"name\":\"tom\",\"age\":10,\"gender\":\"M\"})');\n```\n\n#### object\n\n`object` strategy stringifies target object recursively and decorate object literal-like syntax with its type name. `object` is a default strategy for objects, and any other unknown types.\n\n```javascript\nvar stringify = stringifier({\n    handlers: {\n        'Student': s.object()\n    }\n});\nassert(stringify(student) === 'Student{name:\"tom\",age:10,gender:\"M\"}');\n```\n\n#### array\n\n`array` strategy is an array specific stringification strategy, and is a default strategy for arrays.\n\n```javascript\nvar stringify = stringifier({\n    handlers: {\n        'Array': s.array()\n    }\n});\nassert(stringify(['foo', 'bar', 'baz']) === '[\"foo\",\"bar\",\"baz\"]');\n```\n\n#### number\n\n`number` strategy is a number specific stringification strategy, and is a default strategy for number. `number` strategy also provides `NaN`,`Infinity` and `-Infinity` handling.\n\n```javascript\nvar stringify = stringifier({\n    handlers: {\n        'Array': s.array(),\n        'number': s.number()\n    }\n});\nassert(stringify([NaN, 0, Infinity, -0, -Infinity]) === '[NaN,0,Infinity,0,-Infinity]');\n```\n\n\nAUTHOR\n---------------------------------------\n* [Takuto Wada](http://github.com/twada)\n\n\nLICENSE\n---------------------------------------\nLicensed under the [MIT](http://twada.mit-license.org/2014-2015) license.\n\n\n[travis-url]: http://travis-ci.org/twada/stringifier\n[travis-image]: https://secure.travis-ci.org/twada/stringifier.svg?branch=master\n\n[npm-url]: https://npmjs.org/package/stringifier\n[npm-image]: https://badge.fury.io/js/stringifier.svg\n\n[bower-url]: http://badge.fury.io/bo/stringifier\n[bower-image]: https://badge.fury.io/bo/stringifier.svg\n\n[depstat-url]: https://gemnasium.com/twada/stringifier\n[depstat-image]: https://gemnasium.com/twada/stringifier.svg\n\n[license-url]: http://twada.mit-license.org/2014-2015\n[license-image]: http://img.shields.io/badge/license-MIT-brightgreen.svg\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/twada/stringifier.git"
  },
  "scripts": {
    "bower": "bower install --config.interactive=false",
    "build": "npm prune && npm dedupe && gulp bundle",
    "es6": "./test/travis_es6.sh",
    "lint": "jshint index.js strategies.js",
    "test": "npm run es6 && gulp test",
    "unit": "npm run es6 && gulp unit"
  },
  "version": "1.2.1"
}
