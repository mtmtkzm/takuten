{
  "_args": [
    [
      "type-name@https://registry.npmjs.org/type-name/-/type-name-1.1.0.tgz",
      "/Users/matsumotokazuma/develop/mtmtkzm/takuten2016"
    ]
  ],
  "_from": "type-name@>=1.0.1 <2.0.0",
  "_id": "type-name@1.1.0",
  "_inCache": true,
  "_location": "/type-name",
  "_phantomChildren": {},
  "_requested": {
    "name": "type-name",
    "raw": "type-name@https://registry.npmjs.org/type-name/-/type-name-1.1.0.tgz",
    "rawSpec": "https://registry.npmjs.org/type-name/-/type-name-1.1.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/type-name/-/type-name-1.1.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/espower",
    "/power-assert-formatter",
    "/stringifier"
  ],
  "_resolved": "https://registry.npmjs.org/type-name/-/type-name-1.1.0.tgz",
  "_shasum": "ad9c3f7c330f5b2f08de7d79f56d2b9451e42b0e",
  "_shrinkwrap": null,
  "_spec": "type-name@https://registry.npmjs.org/type-name/-/type-name-1.1.0.tgz",
  "_where": "/Users/matsumotokazuma/develop/mtmtkzm/takuten2016",
  "author": {
    "email": "takuto.wada@gmail.com",
    "name": "Takuto Wada",
    "url": "https://github.com/twada"
  },
  "bugs": {
    "url": "https://github.com/twada/type-name/issues"
  },
  "contributors": [
    {
      "name": "azu",
      "url": "https://github.com/azu"
    },
    {
      "name": "Yosuke Furukawa",
      "url": "https://github.com/yosuke-furukawa"
    }
  ],
  "dependencies": {},
  "description": "Just a reasonable typeof",
  "devDependencies": {
    "jshint": "^2.8.0",
    "mocha": "^2.3.3"
  },
  "directories": {
    "test": "test/"
  },
  "files": [
    "README.md",
    "CHANGELOG.md",
    "index.js",
    "build/type-name.js",
    "package.json",
    "test"
  ],
  "homepage": "https://github.com/twada/type-name",
  "keywords": [
    "typeof",
    "type"
  ],
  "license": "MIT",
  "main": "./index.js",
  "name": "type-name",
  "optionalDependencies": {},
  "readme": "type-name\n================================\n\nJust a reasonable `typeof`\n\n[![Build Status](https://travis-ci.org/twada/type-name.svg?branch=master)](https://travis-ci.org/twada/type-name)\n[![NPM version](https://badge.fury.io/js/type-name.svg)](http://badge.fury.io/js/type-name)\n[![Dependency Status](https://gemnasium.com/twada/type-name.svg)](https://gemnasium.com/twada/type-name)\n[![License](http://img.shields.io/badge/license-MIT-brightgreen.svg)](http://twada.mit-license.org/2014-2015)\n\n[![browser support](https://ci.testling.com/twada/type-name.png)](https://ci.testling.com/twada/type-name)\n\n\nDESCRIPTION\n---------------------------------------\n\n`typeName` function returns reasonable type name for input value.\n\n| description    | input   | result      |\n|:---------------|:--------|:------------|\n| string literal | `'foo'` | `'string'` |\n| number literal | `5` | `'number'` |\n| boolean literal | `false` | `'boolean'` |\n| regexp literal | `/^not/` | `'RegExp'` |\n| array literal | `['foo', 4]` | `'Array'` |\n| object literal | `{name: 'bar'}` | `'Object'` *(be careful!)* |\n| function expression | `function () {}` | `'function'` |\n| String object | `new String('foo')` | `'String'` |\n| Number object | `new Number('3')` | `'Number'` |\n| Boolean object |`new Boolean('1')` | `'Boolean'` |\n| Date object | `new Date()` | `'Date'` |\n| RegExp object | `new RegExp('^not', 'g')` | `'RegExp'` |\n| Array object | `new Array()` | `'Array'` |\n| Object object | `new Object()` | `'Object'` |\n| Function object | `new Function('x', 'y', 'return x + y')` | `'function'` *(be careful!)* |\n| Error object | `new Error('error!')` | `'Error'` |\n| NaN | `NaN` | `'number'` |\n| Infinity | `Infinity` | `'number'` |\n| Math | `Math` | `'Math'` |\n| JSON *(IE8+)* | `JSON` | `'JSON'` |\n| arguments object *(IE9+)*  | `(function(){ return arguments; })()` | `'Arguments'` |\n| null literal | `null` | `'null'` |\n| undefined value | `undefined` | `'undefined'` |\n| User-defined constructor | `new Person('alice', 5)` | `'Person'` |\n| Anonymous constructor | `new AnonPerson('bob', 4)` | `''` |\n\n\nEXAMPLE\n---------------------------------------\n\n```javascript\nvar typeName = require('type-name'),\n    assert = require('assert');\n\nassert(typeName('foo') === 'string');\nassert(typeName(5) === 'number');\nassert(typeName(false) === 'boolean');\nassert(typeName(/^not/) === 'RegExp');\nassert(typeName(['foo', 4]) === 'Array');\nassert(typeName({name: 'bar'}) === 'Object');\nassert(typeName(function () {}) === 'function');\nassert(typeName(new String('foo')) === 'String');\nassert(typeName(new Number('3')) === 'Number');\nassert(typeName(new Boolean('1')) === 'Boolean');\nassert(typeName(new Date()) === 'Date');\nassert(typeName(new RegExp('^not', 'g')) === 'RegExp');\nassert(typeName(new Array()) === 'Array');\nassert(typeName(new Object()) === 'Object');\nassert(typeName(new Function('x', 'y', 'return x + y')) === 'function');\nassert(typeName(new Error('error!')) === 'Error');\nassert(typeName(NaN) === 'number');\nassert(typeName(Infinity) === 'number');\nassert(typeName(Math) === 'Math');\nassert(typeName(JSON) === 'JSON'); // IE8+\nassert(typeName((function(){ return arguments; })()) === 'Arguments');  // IE9+\nassert(typeName(null) === 'null');\nassert(typeName(undefined) === 'undefined');\n\nfunction Person(name, age) {\n    this.name = name;\n    this.age = age;\n}\n\nvar AnonPerson = function(name, age) {\n    this.name = name;\n    this.age = age;\n};\n\nassert(typeName(new Person('alice', 5)) === 'Person');\nassert(typeName(new AnonPerson('bob', 4)) === '');\n```\n\n\nINSTALL\n---------------------------------------\n\n### via npm\n\nInstall\n\n    $ npm install --save type-name\n\nUse\n\n```javascript\nvar typeName = require('type-name');\nconsole.log(typeName(anyVar));\n```\n\n#### use type-name npm module on browser\n\n`typeName` function is exported\n\n    <script type=\"text/javascript\" src=\"./path/to/node_modules/type-name/build/type-name.js\"></script>\n\n\n### via bower\n\nInstall\n\n    $ bower install --save type-name\n\nLoad (`typeName` function is exported)\n\n    <script type=\"text/javascript\" src=\"./path/to/bower_components/type-name/build/type-name.js\"></script>\n\nUse\n\n```javascript\nconsole.log(typeName(anyVar));\n```\n\n### via component\n\nInstall and build\n\n    $ component install twada/type-name\n    $ component build\n\nThen use as usual.\n\n\nAUTHOR\n---------------------------------------\n* [Takuto Wada](http://github.com/twada)\n\n\nCONTRIBUTORS\n---------------------------------------\n* [azu](https://github.com/azu)\n* [Yosuke Furukawa](https://github.com/yosuke-furukawa)\n\n\nLICENSE\n---------------------------------------\nLicensed under the [MIT](http://twada.mit-license.org/2014-2015) license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/twada/type-name.git"
  },
  "scripts": {
    "build": "browserify index.js --standalone typeName | derequire > ./build/type-name.js",
    "lint": "jshint index.js",
    "test": "npm run lint && mocha"
  },
  "testling": {
    "browsers": [
      "ie/6..latest",
      "chrome/22..latest",
      "firefox/16..latest",
      "safari/latest",
      "opera/11.0..latest",
      "iphone/6..latest",
      "ipad/6..latest",
      "android-browser/latest"
    ],
    "files": "test/*.js",
    "harness": "mocha"
  },
  "version": "1.1.0"
}
