{
  "_args": [
    [
      "css-mqpacker@https://registry.npmjs.org/css-mqpacker/-/css-mqpacker-4.0.0.tgz",
      "/Users/matsumotokazuma/develop/mtmtkzm/takuten2016"
    ]
  ],
  "_from": "css-mqpacker@>=4.0.0 <5.0.0",
  "_id": "css-mqpacker@4.0.0",
  "_inCache": true,
  "_location": "/css-mqpacker",
  "_phantomChildren": {
    "jsonfile": "2.2.3",
    "rimraf": "2.5.2"
  },
  "_requested": {
    "name": "css-mqpacker",
    "raw": "css-mqpacker@https://registry.npmjs.org/css-mqpacker/-/css-mqpacker-4.0.0.tgz",
    "rawSpec": "https://registry.npmjs.org/css-mqpacker/-/css-mqpacker-4.0.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/css-mqpacker/-/css-mqpacker-4.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/css-mqpacker/-/css-mqpacker-4.0.0.tgz",
  "_shasum": "b2759814c88fe1d527e86ba33079ecfc5bf6779b",
  "_shrinkwrap": null,
  "_spec": "css-mqpacker@https://registry.npmjs.org/css-mqpacker/-/css-mqpacker-4.0.0.tgz",
  "_where": "/Users/matsumotokazuma/develop/mtmtkzm/takuten2016",
  "author": {
    "email": "hail2u@gmail.com",
    "name": "Kyo Nagashima",
    "url": "https://kyonagashima.com/"
  },
  "bin": {
    "mqpacker": "./bin/mqpacker"
  },
  "bugs": {
    "url": "https://github.com/hail2u/node-css-mqpacker/issues"
  },
  "dependencies": {
    "fs-extra": "^0.16.0",
    "minimist": "^1.1.1",
    "postcss": "^5.0.0"
  },
  "description": "Pack same CSS media query rules into one media query rule.",
  "devDependencies": {
    "nodeunit": "^0.9.0"
  },
  "files": [
    "README.md",
    "bin",
    "index.js",
    "lib",
    "package.json",
    "tasks",
    "test"
  ],
  "homepage": "https://github.com/hail2u/node-css-mqpacker",
  "keywords": [
    "css",
    "media",
    "query",
    "source",
    "map",
    "postcss-plugin",
    "gruntplugin"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "css-mqpacker",
  "optionalDependencies": {},
  "readme": "CSS MQPacker\n============\n\nPack same CSS media query rules into one media query rule.\n\nWritten with [PostCSS][1].\n\n\nSYNOPSIS\n--------\n\nA CSS file processed with a CSS pre-processor may have same queries that can\nmerge:\n\n```css\n.foo::before {\n  content: \"foo on small\";\n}\n\n@media screen and (min-width: 769px) {\n  .foo::before {\n    content: \"foo on medium\";\n  }\n}\n\n.bar::before {\n  content: \"bar on small\";\n}\n\n@media screen and (min-width: 769px) {\n  .bar::before {\n    content: \"bar on medium\";\n  }\n}\n```\n\nThis PostCSS plugin packs exactly same queries (and optionally sorts) like this:\n\n```css\n.foo::before {\n  content: \"foo on small\";\n}\n\n.bar::before {\n  content: \"bar on small\";\n}\n\n@media screen and (min-width: 769px) {\n  .foo::before {\n    content: \"foo on medium\";\n  }\n  .bar::before {\n    content: \"bar on medium\";\n  }\n}\n```\n\n\nINSTALL\n-------\n\n    $ npm install css-mqpacker\n\n\nUSAGE\n-----\n\nOf course, this package can be used as PostCSS plugin:\n\n```javascript\n#!/usr/bin/env node\n\n\"use strict\";\n\nvar fs = require(\"fs\");\nvar postcss = require(\"postcss\");\n\nvar css = fs.readFileSync(\"from.css\", \"utf8\");\npostcss([\n  require(\"autoprefixer-core\")(),\n  require(\"css-mqpacker\")()\n]).process(css).then(function (result) {\n  console.log(result.css);\n});\n```\n\n\n### As standard Node.js package\n\nRead `from.css`, process its content, and output processed CSS to STDOUT.\n\n```javascript\n#!/usr/bin/env node\n\n\"use strict\";\n\nvar fs = require(\"fs\");\nvar mqpacker = require(\"css-mqpacker\");\n\nvar original = fs.readFileSync(\"from.css\", \"utf8\");\nvar processed = mqpacker.pack(original, {\n  from: \"from.css\",\n  map: {\n    inline: false\n  },\n  to: \"to.css\"\n});\nconsole.log(processed.css);\n```\n\n\n### As CLI Program\n\nThis package also installs a command line interface.\n\n    $ node ./node_modules/.bin/mqpacker --help\n    Usage: mqpacker [options] INPUT [OUTPUT]\n    \n    Description:\n      Pack same CSS media query rules into one media query rule.\n    \n    Options:\n      -s, --sort       Sort `min-width` queries.\n          --sourcemap  Create source map file.\n      -h, --help       Show this message.\n      -v, --version    Print version information.\n    \n    Use a single dash for INPUT to read CSS from standard input.\n\nWhen PostCSS failed to parse INPUT, CLI shows a CSS parse error in GNU error\nformat instead of Node.js stack trace.\n\nThe `--sort` option does not currently support a custom function.\n\n\n### As Grunt Plugin\n\nThis package also installs a Grunt plugin. You can enable this plugin in\n`Gruntfile.js` of your project like that:\n\n    grunt.loadNpmTasks(\"css-mqpacker\");\n\nTo pack `src/css/**/*.css` to `build/css/**/*.min.css` with source map:\n\n    grunt.initConfig({\n      \"css_mqpacker\": {\n        options: {\n          map: {\n            inline: false,\n            sourcesContent: false\n          }\n        },\n    \n        main: {\n          cwd: \"src/css/\",\n          dest: \"build/css/\",\n          expand: true,\n          ext: \".min.css\",\n          src: [\"**/*.css\"]\n        }\n      }\n    });\n\nYou can specify both [options of this package][2] and [PostCSS options][3] with\n`options` field of this task.\n\nThis was not tested. I suggest using [`grunt-postcss`][4].\n\n\nOPTIONS\n-------\n\n### sort\n\nBy default, CSS MQPacker pack and order media queries as they are defined. See\nalso [The \"First Win\" Algorithm][5]. If you want to sort queries automatically,\npass `sort: true` to this module.\n\n```javascript\npostcss([\n  mqpacker({\n    sort: true\n  })\n]).process(css);\n```\n\nCurrently, this option only supports `min-width` queries with specific units\n(`ch`, `em`, `ex`, `px`, and `rem`). If you want to do more, you need to create\nyour own sorting function and pass it to this module like this:\n\n```javascript\npostcss([\n  mqpacker({\n    sort: function (a, b) {\n      return a.localeCompare(b);\n    }\n  })\n]).process(css);\n```\n\nIn this example, all your queries will sort by A-Z order.\n\nThis sorting function directly pass to `Array#sort()` method of an array of all\nyour queries.\n\n\nAPI\n---\n\n### pack(css, [options])\n\nPacks media queries in `css`.\n\nThe second argument is optional. The `options` is same as the second argument of\nPostCSSâ€™s `process()` method. This is useful for generating Source Map.\n\n```javascript\nvar fs = require(\"fs\");\nvar mqpacker = require(\"css-mqpacker\");\n\nvar css = fs.readFileSync(\"from.css\", \"utf8\");\nvar result = mqpacker.pack(css, {\n  from: \"from.css\",\n  map: {\n    inline: false\n  },\n  to: \"to.css\"\n});\nfs.writeFileSync(\"to.css\", result.css);\nfs.writeFileSync(\"to.css.map\", result.map);\n```\n\nSee also [PostCSS document][3] for more about this `options`.\n\n\nKNOWN ISSUES\n------------\n\n### The \"First Win\" Algorithm\n\nCSS MQPacker is implemented with the \"first win\" algorithm. This means:\n\n```css\n.foo {\n  width: 10px;\n}\n\n@media (min-width: 640px) {\n  .foo {\n    width: 150px;\n  }\n}\n\n.bar {\n  width: 20px;\n}\n\n@media (min-width: 320px) {\n  .bar {\n    width: 200px;\n  }\n}\n\n@media (min-width: 640px) {\n  .bar {\n    width: 300px;\n  }\n}\n```\n\nBecomes:\n\n```css\n.foo {\n  width: 10px;\n}\n\n.bar {\n  width: 20px;\n}\n\n@media (min-width: 640px) {\n  .foo {\n    width: 150px;\n  }\n  .bar {\n    width: 300px;\n  }\n}\n\n@media (min-width: 320px) {\n  .bar {\n    width: 200px;\n  }\n}\n```\n\nThis breaks cascading order of `.bar`, and `.bar` will be displayed in `200px`\ninstead of `300px` even if a viewport wider than `640px`.\n\nI suggest defining a query order at first:\n\n```css\n@media (min-width: 320px) { /*! Wider than 320px */ }\n@media (min-width: 640px) { /*! Wider than 640px */ }\n```\n\nOr sort [`min-width` queries automatically][6].\n\n\n### CSS Applying Order\n\nCSS MQPacker changes order of rulesets. This may breaks CSS applying order.\n\n```css\n@media (min-width: 320px) {\n  .foo {\n    width: 100px;\n  }\n}\n\n@media (min-width: 640px) {\n  .bar {\n    width: 200px;\n  }\n}\n\n@media (min-width: 320px) {\n  .baz {\n    width: 300px;\n  }\n}\n```\n\nBecomes:\n\n```css\n@media (min-width: 320px) {\n  .foo {\n    width: 100px;\n  }\n  .baz {\n    width: 300px;\n  }\n}\n\n@media (min-width: 640px) {\n  .bar {\n    width: 200px;\n  }\n}\n```\n\nFine. But If a HTML element has `class=\"bar baz\"` and viewport width larger than\n`640px`, that element `width` incorrectly set to `200px` instead of `300px`.\nThis cannot be resolved only with CSS. So, be careful!\n\n\nLICENSE\n-------\n\nMIT: http://hail2u.mit-license.org/2014\n\n\n[1]: https://github.com/postcss/postcss\n[2]: #options\n[3]: https://github.com/postcss/postcss#source-map\n[4]: https://github.com/nDmitry/grunt-postcss\n[5]: #the-first-win-algorithm\n[6]: #sort\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/hail2u/node-css-mqpacker.git"
  },
  "scripts": {
    "test": "nodeunit test"
  },
  "version": "4.0.0"
}
